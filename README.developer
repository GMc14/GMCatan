README.developer - Notes and current status of 2010 JSettlers development (version 1.1.xx at nand.net)
	http://nand.net/jsettlers/devel/
	http://sourceforge.net/projects/jsettlers2/

The main server class is soc.server.SOCServer.
The client communication is soc.client.SOCPlayerClient, and in-game interface is in soc.client.SOCPlayerInterface.
Game state is held at the server in soc.game.SOCGame and its fields.  Partial game state is known at clients.
Communication is described in soc.message.SOCMessage.
Robots talk with the server like normal human clients.
Most robot messages are per-game; instead of being handled in SOCRobotClient,
these are handled in a loop in SOCRobotBrain.run().

Coding is done in Java 1.4 for now, but should compile cleanly in newer JDKs.
The build system is Ant, which is natively understood by Eclipse.  Use any IDE you want, including vi.
Use spaces, not tabs.  Please try to keep the other conventions of the code already there.
(See "Coding Style" below for more details.)
When adding new methods or fields, describe them in javadoc, including the @since marker
and the one-sentence summary (even though some old methods don't have that summary).
When submitting patches, please use unified diff (-ur) format.

See VERSIONS.txt for recent changes.

Current partially-done work:
	- Refactor SOCMessage classes to use templates
	- Support for other board encoding formats, or other board sizes
	- Some SOCMessage classes (SOCGames, SOCJoinGameRequest) accept objects like SOCGame and parse/create them;
	    over-the-network communication will always be strings only.


For debugging, if you want to inspect the game state at the server or robot:
	Set a breakpoint at SOCServer.processDebugCommand, or at "case SOCMessage.GAMETEXTMSG"
	  send a text msg from a client (the chat textfield), and inspect the game obj at that point
	To inspect game state at robot, breakpoint robotcli.treat and send a text msg like *BOTLIST* or robot2:current-plans


Current TODO list: (Work on these items not yet begun)
	You can also search the source for TODO for ideas.
	- Keyboard shortcuts for "roll", "done" buttons
	- User documentation is out of date; unsure if any user ever reads it anyway
	- Visual reminder to player when they've made an offer
	- Hovering mouse at center of robber-hex, should be able to see tooltip with the dice #.
		instead, currently see road of players on either side
	- Rename SOCGame.isLocal to .isPractice
	- Show # VP when choosing where to sit, if game is in progress
	- Occasionally an image does not re-scale when board is stretched.
		Instead of giving up (SOCBoardPanel.scaledHexFail, etc),
		try re-scaling again, but increase width or height by 1 pixel.
	- Kick robots if inactive but current player in game, assume they're buggy (use forceEndTurn)
	- If try to start server in JSettlers.jar, but port already in use, currently ends program immediately
		should instead show MessagePanel with option to practice, or even just show a message
	- Properties for game option defaults for server startup
		-Djsettlers.game.N7=y  instead of -O N7=y
		allow lowercase too
		probably best done at bottom of SOCServer.parseCmdline_DashedArgs
	- Possible: Auto-add robots when needed as server runs, with server active-game count
		only do it if jsettlers.startrobots property is set
	- At board reset, game observers not currently handled properly
	- Game "owner" with extra powers (kick out player, etc)
		what happens if owner loses connection?
	- "Hot seat" mode (multiple human players sharing a screen on 1 client)
	- Board coordinate-representation for larger board (seafarers)
	- Refactor: combine the cli/displayless/robot endturn-like methods
		ex. search for ga.setCurrentDice(0), or newToOld, or ga.resetVoteClear
	- refactor: resource-type constants consolidate somewhere (Clay, Wheat, etc)
		current SOCResourceConstants.CLAY vs SOCPlayerElement.CLAY
	- refactor: name of dev-cards consolidate
	- refactor: SOCPlayerClient gui to separate class (mainpanel)

The rotated 3:1 port hexes' font is Optima Bold, 21 pt.


Coding Style
------------
Use spaces, not tabs.  The basic indent is 4.  Place braces on their own line.

Use 1 blank line between methods.  If you have nested classes, use 3 blank 
lines between them, and comment each one's closing brace with the class name.
If you have a long method whose work can be divided into "sections",
preface each section with a /** javadoc-style */ multi-line comment.

In emacs, you can turn off tabs with this in your .emacs file:
(setq-default c-basic-offset 4)
(setq indent-tabs-mode nil)
	[ courtesy http://www.jwz.org/doc/tabs-vs-spaces.html, which also mentions vi ]
You will also want this to have this, which disables auto-reindenting:
(setq-default c-electric-flag nil)


In eclipse, here's how to set up the coding style:

	preferences -> general -> editors -> text editors:
	[x] insert spaces for tabs
	displayed tab width: 8

	prefs -> java -> code style -> formatter -> Click "Configure Project Specific Settings"
		{
		based on Eclipse built-in standard

		Profile name: 'jsettlers' (apply)

		(Indentation)
		Tab policy: Spaces only
		Indentation: 4
		Tab size: 8
		confirm is unchecked: [ ] Indent empty lines

		(Brace positions)
		All 'next line' except:
		Blocks in case stmt: Next line indented
		Array init: Next line indented
		[X] Keep empty array initializer on one line

		(Control Statements)
		[X] New line before else in if
		[X] New line before catch in try
		[X] New line before finally in try
		[ ] New line before while in do
		[X] Keep 'else if' on one line
		[ ] (all other options)

		(All other tabs)
		Take defaults

		}

		Hit OK
		restart eclipse

		go to prefs -> java -> code style -> formatter
		  if it's not active: set active profile to jsettlers & restart eclipse

		prefs -> java -> editor -> typing
			Verify tab 8 spaces, indent 4 spaces:
	   [x] Tab key adjusts indentation of current line
	   "The tab display value (currently 8) and whether spaces are used to indent lines
	    are configured on the formatter preference page.  The current indentation size
	    is 4, using spaces."

When you hit enter and insert a new line in Eclipse, watch the whitespace, it
will add whitespace to the blank line to match the current indent.

If desired, in Eclipse preferences, you can bind a key combination to Remove Trailing Whitespace.
This will trim it from the entire file when the key is pressed.



[The text below is obsolete, from the sourceforge jsettlers project.]

CVS
---

HEAD recieves new features and enhancements for next 'minor' release.
Simple bug fixes are made to the branch.

It is safest to use a separate sandbox for working on a branch,
checking in simple bug fixes there. Those changes are merged into the
HEAD as needed, and a "bookmark" tag is placed on the branch after the
merge.

 ~/ > cvs co -r jsettlers-x-y-branch -d jsettlers-branch jsettlers

Update that sandbox to the tip of the branch, make updates, and commit:

 ~/jsettlers-branch > cvs up -r jsettlers-x-y-branch
    ...
 ~/jsettlers-branch > cvs com -m "fixed xyz problems pdq" $files

Then merge the changes into the HEAD, commit, and move the
jsettlers-x-y-merged tag. This way, the merge into the HEAD will always
look like the following:

 ~/jsettlers-HEAD > cvs up -j jsettlers-x-y-merged -j jsettlers-x-y-branch $files
 ~/jsettlers-HEAD > cvs com -m "merged branch x.y into HEAD" $files
 ~/jsettlers-HEAD > cvs tag -F -r jsettlers-x-y-branch jsettlers-x-y-merged $files

The idea is that the last merge to HEAD is always tagged in the
branch. This way you can also get an overview of the changes made in
the branch which have not yet been merged into HEAD:

 ~/jsettlers-branch > cvs diff -u -r jsetters-x-y-merged -r jsettlers-x-y-branch $files

